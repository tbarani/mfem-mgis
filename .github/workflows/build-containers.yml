name: "Docker"

on:
  # Always have a base image ready to go - this is a nightly build
  schedule:
    - cron: 0 3 * * *

  # Allow manual trigger of a build
  workflow_dispatch:

  # On push to main we build and deploy images
  push:
    branches:
      - master

  # Publish packages on release
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    # equivalent to cpu-tpls
    container:
      image: ghcr.io/mfem/containers/developer-cpu:latest
    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)

#    name: Build
#      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get MFEM
        run: git clone https://github.com/mfem/mfem.git
      - name: Config MFEM
        run:  cmake -DMFEM_USE_MPI=ON -DMFEM_USE_METIS_5=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/mfem-install -S mfem -B ${{github.workspace}}/build-mfem
      - name: Build MFEM
        run: cmake --build ${{github.workspace}}/build-mfem --config Release
      - name: Install MFEM
        run: cmake --install  ${{github.workspace}}/build-mfem
      - name: Config MFEMMGIS
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release  -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DMFEM_DIR=${{github.workspace}}/mfem-install

      - name: Build MFEMMGIS
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 
#      - name: Ctest
#        working-directory: ${{github.workspace}}/build
#        run: make examples && ctest -C --rerun-failed --output-on-failure ${{env.BUILD_TYPE}}
